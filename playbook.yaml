- name: Setup Janus
  hosts: all
  become: yes
  gather_facts: yes  # Ensure facts are gathered
  serial: 1  # Run the playbook on one server at a time

  vars_files:
    - sudo_pass.yaml

  tasks:
    - name: Install necessary packages
      apt:
        name:
          - nginx
          - certbot
          - python3-pip
        state: present
        update_cache: yes

    - name: Install Certbot plugins using pip
      pip:
        name:
          - certbot-dns-cloudflare
          - certbot-nginx
        executable: pip3

    - name: Create Cloudflare credentials file for Certbot
      copy:
        dest: /etc/letsencrypt/cloudflare.ini
        content: |
          dns_cloudflare_api_token = {{ cloudflare_api_token }}
        mode: '0600'

    - name: Obtain a dry-run SSL certificate using Certbot and Cloudflare DNS
      shell: |
        certbot certonly --non-interactive --agree-tos -v --email {{ email }} --dry-run --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini --dns-cloudflare-propagation-seconds 30 -d "{{ certbot_domains }}"
      args:
        executable: /bin/bash

    - name: Obtain SSL certificate using Certbot and Cloudflare DNS
      shell: |
        certbot certonly --non-interactive --agree-tos -v --email {{ email }} --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini --dns-cloudflare-propagation-seconds 30 -d "{{ certbot_domains }}"
      args:
        executable: /bin/bash

    - name: Enable and start Certbot service
      systemd:
        name: certbot
        enabled: yes
        state: started

    - name: Create Nginx configuration file for Janus
      copy:
        dest: /etc/nginx/conf.d/janus.conf
        content: |
          server {
            listen 80 default_server;
            listen [::]:80 default_server;
            server_name {{ server_name }};
            # allow letsencrypt
            location ~ /\.well-known {
              allow all;
              root /var/www/html;
              try_files $uri $uri/ =404;
            }
            location / {
              return 301 https://$host$request_uri;
            }
          }

          server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name {{ server_name }};
            keepalive_timeout 70;
            location /janus {
              proxy_pass http://127.0.0.1:8188/janus;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
            }
            location / {
              root /var/www/naf-janus-adapter/examples;
            }

            # ssl settings
            ssl_certificate /etc/letsencrypt/live/alfa.rest/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/alfa.rest/privkey.pem;
            ssl_session_timeout 1d;
            ssl_session_cache shared:MozSSL:10m;
            ssl_session_tickets off;

            # modern configuration
            ssl_protocols TLSv1.3;
            ssl_prefer_server_ciphers off;

            # HSTS
            add_header Strict-Transport-Security "max-age=63072000" always;

            # OCSP stapling
            ssl_stapling on;
            ssl_stapling_verify on;

            # verify chain of trust of OCSP response using Root CA and Intermediate certs
            ssl_trusted_certificate /etc/letsencrypt/live/alfa.rest/chain.pem;
            resolver 8.8.8.8 8.8.4.4;
          }
      notify:
        - Reload Nginx

    - name: Remove the default Nginx site configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - Reload Nginx

    - name: Run Janus Docker container
      docker_container:
        name: janus
        image: docker.bea.sh/alfaexpo/janus:main
        restart_policy: always
        network_mode: host
        env:
          MAX_ROOM_SIZE: "81"
          ADMIN_SECRET: "cd61193e-203b-464a-9361-63e34ada6e64"
        state: started

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded
